h1. Sandbar

Sandbar is a library for web applications built on top of Compojure. It contains code to help with: 

* scaling server side state
* tables which may be filtered, sorted and paged
* form layout, validation and error reporting
* authorization and authentication
* user management

The project contains the library code as well a reference application which uses the library.

h2. Running the reference application

The reference application demonstrates how to use the sandbar libraries.

To run the reference application, follow these steps:

# Create a MySQL database on localhost named idea_db
# Create a MySQL user named idea_user@localhost with password 123456789
# Give the above user all privileges on the idea_db database.
# "Install Leiningen":http://github.com/technomancy/leiningen
# Execute the following commands:

<pre><code> 
git clone git://github.com/brentonashworth/sandbar.git
cd sandbar
lein deps
lein test
lein repl
(load-file "src/testdrive.clj")
</code></pre>

You may now open a browser and go to http://localhost:8080/ideadb/.

There are two user accounts:

username: admin-user
password: admin

username: normal-user
password: password

Log in with one of these accounts and take it for a spin. The next step would be to take a look at the code and tinker with it in your development environment of choice. Start with src/sandbar/example/ideadb/app.clj.

h2. Features

This is the very beginning of this project. Much of the code is a mess at this point and the API is shifting. As features become more complete I will add documentation for them here. The main focus in now on authentication and authorization as I think this is the first feature that others may want to use.

h3. Authentication and Authorization

See src/sandbar/example/ideadb/app.clj and src/sandbar/auth.clj

* Work on API. How can it be easily extended.
* Use SHA-256
* Use Compojure's security functions.
* Improve error handling when something goes wrong at the db level. Catch exceptions and display error messages.
* Should be able to configure a default login redirect page. For when a user logs in but there is no redirect page in the session.

h2. Road map

The reference application is currently easiest to get running with MySQL. I plan to change this to use Derby by default so that it will be easier for others to test drive.

h3. Scaling server side state

When server side state is needed by any part of the library it will not use Compojure's session management. A session interface will be included in the library. For small applications that don't need to scale, the session is implemented as an in-process atom. When you need to start scaling you can switch implementations to client-server based sessions. This will have the same interface as the in-process sessions but state will be stored in another process or on another machine. This allows you to have sessions that will scale when you need them to without having to use 'sticky' sessions or put transient session state in your system of record.

The client-server model will have a very simple interface and be backed by "FleetDB":http://github.com/mmcgrana/fleetdb.

h3. Tables which may be filtered, sorted and paged

h3. Form layout, validation and error reporting

h3. User management

h2. License

Copyright (C) 2010 Brenton Ashworth

Distributed under the Eclipse Public License, the same as Clojure uses. See the file COPYING.


