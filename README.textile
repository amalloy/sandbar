h1. Sandbar

Sandbar is a library for web applications built on top of Compojure. It contains code to help with: 

* scaling server side state
* tables which may be filtered, sorted and paged
* form layout, validation and error reporting
* authorization and authentication
* user management

The project contains the library code as well a reference application which uses the library.

h2. Overview and motivation

The goal of this project is to create a library that will allow Clojure developers to create useful web applications with the minimum amount of code. I want to see how small the minimum can be.

This is not a framework so it doesn't tell you how to work. It provides features that you might need as libraries. If you find something here that is useful to you, then use it. You may safely ignore the rest.

h2. Running the reference application

The reference application demonstrates how to use the sandbar libraries.

TODO: more detail

To run the reference application, follow these steps:

# Create a MySQL database on localhost named idea_db
# Create a MySQL user named idea_user@localhost with password 123456789
# "Install Leiningen":http://github.com/technomancy/leiningen
# Execute the following commands:

<pre>
	<code> 
git clone git://github.com/brentonashworth/sandbar.git
cd sandbar
lein deps
lein test
lein repl
(load-file "src/testdrive.clj")
	</code>
</pre>

You may now open a browser and go to http://localhost:8080/ideadb/.

There are two user accounts:

username: admin-user
password: admin

username: normal-user
password: password

Log in with one of these accounts and take it for a spin. The next step would be to take a look at the code and tinker with it in your development environment of choice. Start with src/sandbar/example/ideadb/app.clj.

h2. Road map

This is the very beginning of this project. Things will change rapidly and be ugly for a while. Input is welcome.

h3. Scaling server side state

When server side state is needed by any part of the library it will not use Compojure's session management. A session interface will be included in the library. For small applications that don't need to scale, the session is implemented as an in-process atom. When you need to start scaling you can switch implementations to client-server based sessions. This will have the same interface as the in-process sessions but state will be stored in another process or on another machine. This allows you to have sessions that will scale when you need them to without having to use 'sticky' sessions or put transient session state in your system of record.

The client-server model will have a very simple interface and be backed by "fleetdb":http://github.com/mmcgrana/fleetdb.

h3. Authentication and Authorization

* Use SHA-256 and use Compojure's security functions.
* Improve error handling when something goes wrong at the db level. Catch exceptions and display error messages.
* Should be able to configure a default login redirect page.

h3. A kind of wiki

More information later...

h3. Solr interface

More information later...

