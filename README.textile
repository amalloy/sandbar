h1. Sandbar

Sandbar is a web application library which is designed to be used with "Compojure":http://github.com/weavejester/compojure and/or "Ring":http://github.com/mmcgrana/ring. It builds on these projects providing the following additional features:

* Session and flash as a global map
* Authorization and authentication, including built-in support for form-based authentication
* Forms and form validation

More documentation is located in the <a href="http://github.com/brentonashworth/sandbar/wiki">Sandbar Wiki</a>.

h2. Sessions

Replace <code>wrap-session</code> with <code>wrap-stateful-session</code> and you can do this:

<pre>
<code>
(defn increment-counter []
  (let [counter (+ 1 (session-get :counter 0))]
    (do (session-put! :counter counter)
        (str "Counter is now " counter))))
</code>
</pre>

Flash is supported as well with <code>set-flash-value!</code> and <code>get-flash-value</code>.

For more detailed documentation see the <a href="http://github.com/brentonashworth/sandbar/wiki/Stateful-Sessions">Stateful Sessions</a> page in the Sandbar Wiki.

h2. Authorization and Authentication

Create a security policy

<pre>
<code>
(def security-policy
     [#"/admin.*"                   :admin 
      #"/permission-denied.*"       :any
      #"/login.*"                   :any 
      #".*\.(css|js|png|jpg|gif)$"  :any 
      #".*"                         #{:admin :user}])
</code>
</pre>

Add it to your project

<pre>
<code>
(def app
  (-> routes
    (with-security security-policy form-authentication)
    wrap-stateful-session))
</code>
</pre>

Use it

<pre>
<code>
(ensure-any-role #{:user :admin}
  (disintegrate "something"))
</code>
</pre>

For more detailed documentation see the <a href="http://github.com/brentonashworth/sandbar/wiki/Authentication-and-Authorization">Authentication and Authorization</a> page in the Sandbar Wiki.

h2. Forms

Create a simple form with one textfield and validate its input.

<pre>
<code>
(defform user-form "/user/edit"
  :fields [(hidden :id)
           (textfield "Username" :username)]
  :load #(db/find-user %)
  :on-cancel "/"
  :on-success
  #(do
     (db/store-user %)
     (set-flash-value! :user-message "User has been saved.")
     "/")
  :validator
  #(if (< (count (:username %)) 5)
     (add-validation-error % :username "Username must have at least 5 chars.")
     %))

(defroutes routes
  (user-form (fn [request form] (layout form))))
</code>
</pre>

For more detailed documentation see the <a href="http://github.com/brentonashworth/sandbar/wiki/Forms">Forms</a> or <a href="http://github.com/brentonashworth/sandbar/wiki/Form-Validation">Form Validation</a> pages in the Sandbar Wiki.

h2. Other Examples

Within Sandbar are some "working examples":http://github.com/brentonashworth/sandbar/tree/master/src/sandbar/example which may be helpful. The "Sandbar Examples":http://github.com/brentonashworth/sandbar-examples project contains other examples of Sandbar usage. You may also want to take a look at the "Clojure Web":http://github.com/abedra/clojure-web project which uses Sandbar in the Authentication examples.

h2. Using Sandbar in your project

h3. Leiningen

Add <code>[sandbar/sandbar "0.3.0-SNAPSHOT"]</code> to your :dependencies in project.clj.

h3. Maven

Add the following dependency:

<pre><code><dependency>
  <groupId>sandbar</groupId>
  <artifactId>sandbar</artifactId>
  <version>0.3.0-SNAPSHOT</version>
</dependency></code></pre>

which comes from Clojars...

<pre><code><repository>
  <id>clojars.org</id>
  <url>http://clojars.org/repo</url>
</repository></code></pre>

Please note that any code with a namespace prefix of <code>sandbar.dev</code> is very pre-alpha. It will change often and may not work.

h2. License

Copyright (C) 2010 Brenton Ashworth

Thanks to Allen Rohner for his help with this project.

Distributed under the Eclipse Public License, the same as Clojure uses. See the file COPYING.





